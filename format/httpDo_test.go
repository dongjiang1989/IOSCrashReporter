package Format

import (
	"testing"

	"github.com/stretchr/testify/assert"
)

func Test_httpJsonDo_GetModuleName(t *testing.T) {
	assert := assert.New(t)
	abc := GetModuleName("de9b274f9c39344fb0c656f26a17e372", "KZTimer.m")
	assert.Equal(abc, "TheOne")
}

func Test_httpJsonDo_GetParseSymbol(t *testing.T) {
	assert := assert.New(t)
	abc, err := GetParseSymbol(map[string][]int64{"7cf4edf781cb30438b812ded8716cd95": []int64{110408, 109547, 109548, 100000, 109096, 109508, 110000, 110152, 120000}}, 1, "04CD9B91-0DDD-445B-98C0-A533EA59A272")
	assert.Nil(err, nil)
	assert.Equal(abc, []byte{0x7b, 0x22, 0x64, 0x61, 0x74, 0x61, 0x22, 0x3a, 0x7b, 0x22, 0x37, 0x63, 0x66, 0x34, 0x65, 0x64, 0x66, 0x37, 0x38, 0x31, 0x63, 0x62, 0x33, 0x30, 0x34, 0x33, 0x38, 0x62, 0x38, 0x31, 0x32, 0x64, 0x65, 0x64, 0x38, 0x37, 0x31, 0x36, 0x63, 0x64, 0x39, 0x35, 0x22, 0x3a, 0x7b, 0x22, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x22, 0x3a, 0x22, 0x5f, 0x5f, 0x67, 0x65, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x42, 0x79, 0x74, 0x65, 0x4f, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x22, 0x2c, 0x22, 0x31, 0x30, 0x39, 0x30, 0x39, 0x36, 0x22, 0x3a, 0x22, 0x5f, 0x5f, 0x67, 0x65, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x41, 0x74, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x22, 0x2c, 0x22, 0x31, 0x30, 0x39, 0x35, 0x30, 0x38, 0x22, 0x3a, 0x22, 0x2d, 0x5b, 0x4e, 0x53, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5d, 0x22, 0x2c, 0x22, 0x31, 0x30, 0x39, 0x35, 0x34, 0x37, 0x22, 0x3a, 0x22, 0x2d, 0x5b, 0x4e, 0x53, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5d, 0x22, 0x2c, 0x22, 0x31, 0x30, 0x39, 0x35, 0x34, 0x38, 0x22, 0x3a, 0x22, 0x2d, 0x5b, 0x5f, 0x5f, 0x4e, 0x53, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x3a, 0x5d, 0x22, 0x2c, 0x22, 0x31, 0x31, 0x30, 0x30, 0x30, 0x30, 0x22, 0x3a, 0x22, 0x2d, 0x5b, 0x5f, 0x5f, 0x4e, 0x53, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x3a, 0x5d, 0x22, 0x2c, 0x22, 0x31, 0x31, 0x30, 0x31, 0x35, 0x32, 0x22, 0x3a, 0x22, 0x2d, 0x5b, 0x5f, 0x5f, 0x4e, 0x53, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x20, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x3a, 0x5d, 0x22, 0x2c, 0x22, 0x31, 0x31, 0x30, 0x34, 0x30, 0x38, 0x22, 0x3a, 0x22, 0x2d, 0x5b, 0x4e, 0x53, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x69, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x5d, 0x22, 0x2c, 0x22, 0x31, 0x32, 0x30, 0x30, 0x30, 0x30, 0x22, 0x3a, 0x22, 0x2d, 0x5b, 0x4e, 0x53, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x41, 0x74, 0x50, 0x61, 0x74, 0x68, 0x3a, 0x5d, 0x22, 0x7d, 0x7d, 0x2c, 0x22, 0x68, 0x69, 0x74, 0x22, 0x3a, 0x39, 0x2c, 0x22, 0x6d, 0x73, 0x67, 0x22, 0x3a, 0x22, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x2c, 0x22, 0x72, 0x65, 0x74, 0x22, 0x3a, 0x30, 0x2c, 0x22, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x3a, 0x39, 0x7d})
}
